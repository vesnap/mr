cmdhistory=[";; Switching to datamodel namespace" "(def data-url \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")" "(defn parsing [url](xml/parse url))\\r\\n\\r\\n(defn zipp [data] (z/xml-zip data))\\r\\n\\r\\n(defn contents[cont] \\r\\n  (zf/xml-> cont \:events \:event \:title))\\r\\n\\r\\n(defn data [url] (en-html/xml-resource url))\\r\\n\\r\\n(defn select-data[url] (en-html/select (data url) [\:events]))\\r\\n; pulls out a list of all of the root att attribute values\\r\\n\\r\\n\\r\\n\\r\\n(defn data [](en-html/xml-resource data-url));vektor sa svim\\r\\n;(en-html/select data [\:events]);mape tih tagova\\r\\n;select value od \:tag bude kao tag u toj mapi a select value od \:value bude value\\r\\n;od ovih mapa hocu da napravim mapu \:tag val \:content \:val\\r\\n\\r\\n\\r\\n(defn add-content [url coll]\\r\\n  (map \:contents (z/xml-zip (xml/parse url)) coll))\\r\\n\\r\\n;import data source - connect to data source, \\r\\n\\r\\n;parsing and data mapping\\r\\n\\r\\n;structs u defrecorde\\r\\n(defstruct event \:event-name \:performers \:start-time \:stop-time)\\r\\n(defstruct event-map  \:title  \:event-data)\\r\\n\\r\\n(defstruct artist-lastfm \:name \:mbid \:url \:summary)\\r\\n\\r\\n(defstruct artist-musicbrainz \:gender \:country \:life-span)\\r\\n\\r\\n(defstruct tag-list \:tag \:name \:url)\\r\\n(defstruct venue \:id \:name \:location)\\r\\n(defstruct location \:lat \:long \:name)\\r\\n(defstruct image \:url \:width \:height \:thumb)\\r\\n(defstruct category \:id)\\r\\n\\r\\n(defmacro defentity [name & values]\\r\\n  `(defrecord ~name [~@values]))\\r\\n(def apis (defentity api-name api-url api-format))\\r\\n;all structs to records\\r\\n(defrecord event [event-name performers start-time stop-time])\\r\\n(def events-url \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")\\r\\n\\r\\n(defn to-keys [& args]\\r\\n  (for [k args] (vector (map \#(keyword %) k))))\\r\\n\\r\\n\\r\\n(defn parsing [xz tags-to-pull tags-start]\\r\\n  (for [tagg to-keys(tags-to-pull)](map (juxt \#(zf/xml1-> % tagg text))(zf/xml-> xz tags-start))\\r\\n  ))\\r\\n\\r\\n;ovo refakorisati tako da zf/xml1-> radi sa jednim pojednim key-em iz rekorda\\r\\n;trebace defmacro za ovo\\r\\n (defn musicBrainzToArtist[xz]\\r\\n  \\"Artists from musicBrainz transfered to struct from zipper tree made of feed output\\"\\r\\n  (map (juxt \\r\\n        ;\#(zf/xml1-> % \:name )  \\r\\n        \#(zf/xml1-> % \:gender text) \\r\\n         \#(zf/xml1-> % \:country text)\\r\\n         \#(zf/xml1-> % \:life-span \:begin text)\\r\\n         )\\r\\n     (zf/xml-> xz \:artist-list \:artist))\\r\\n  )\\r\\n\\r\\n(defn lastFmToArtist[xz]\\r\\n  \\"Artists from last.fm transfered to struct from zipper tree made of feed output\\"\\r\\n  (map (juxt \\r\\n        \#(zf/xml1-> % \:name text)  \\r\\n        \#(zf/xml1-> % \:mbid text) \\r\\n         \#(zf/xml1-> % \:url text)\\r\\n         \#(zf/xml1-> % \:bio \:summary text)\\r\\n         )\\r\\n     (zf/xml-> xz \:artist))\\r\\n  )\\r\\n\\r\\n(defn get-events\\r\\n  [xz] \\r\\n  (map (juxt \\r\\n        \#(zf/xml1-> % \:title zf/text) \\r\\n        \#(zf/xml1-> % \:performers \:performer \:name zf/text) \\r\\n        \#(zf/xml1-> % \:start_time zf/text) \\r\\n         \#(zf/xml1-> % \:stop_time zf/text))\\r\\n     (zf/xml-> xz  \:events \:event)))\\r\\n\\r\\n;ovo probaj da prebacis da bude sa obicnom mapom\\r\\n (defn create-map-of-events [event]\\r\\n   (map \#(apply struct event %)(get-events (z/xml-zip (xml/parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")))))\\r\\n\\r\\n (defn create-map-of-artists-lastfm  []\\r\\n  (map \#(apply struct artist-lastfm %) (lastFmToArtist (z/xml-zip (xml/parse \\"http\://ws.audioscrobbler.com/2.0/?method\=artist.getinfo&artist\=Cher&api_key\=b25b959554ed76058ac220b7b2e0a026\\")))))\\r\\n \\r\\n (defn create-map-of-artists-musicbrainz  []\\r\\n  \\r\\n   (map \#(apply struct artist-musicbrainz %) (musicBrainzToArtist (z/xml-zip (xml/parse \\"http\://www.musicbrainz.org/ws/2/artist/?query\=artist\:cher\\")))))\\r\\n \\r\\n \\r\\n\\r\\n\\r\\n(defn events-for-mashup []\\r\\n  (let [title \\"Events mashup\\" event-data (vector (create-map-of-events))] \\r\\n    (apply struct event-map title event-data)))\\r\\n \\r\\n\\r\\n(defn get-performers []\\r\\n ( doseq [event (create-map-of-events)] \\r\\n   (let [performer (get event \:start-time)]\\r\\n     (case performer (not(nil?)) println performer))))  \\r\\n\\r\\n \\r\\n;_exchange.getOut().setBody(createEarthquake(title.substring(7), date, title.substring(2,5), latitude, longitude, depth, area))" "(get-performers)" "(+ 1 2)" ";; Switching to datamodel namespace" "(ns datamodel\\r\\n(\:import (java.io ByteArrayInputStream))\\r\\n  (\:use \\r\\n    [net.cgrand.enlive-html \:as en-html ])\\r\\n  (\:require\\r\\n    [clojure.zip \:as z] \\r\\n    [clojure.data.zip.xml \:only (attr text xml->)]\\r\\n    [clojure.xml \:as xml ]\\r\\n    [clojure.contrib.zip-filter.xml \:as zf]\\r\\n    ))" ";; Switching to datamodel namespace" "(defmacro defentity [name & values]\\r\\n  `(defrecord ~name [~@values]))" "(def apis (defentity api-name api-url api-format))" ";; Switching to datamodel namespace" "(defmacro defentity [name & values]\\r\\n  `(defrecord ~name [~@values]))" "(def apis (defentity api-name api-url api-format))" "(def event (defentity event-name performers start-time stop-time))" "(defmacro mapping [name API_data entity] \\r\\n  `(def ~name [~@API_data ~@entity] \\r\\n     (into {} (map (juxt (keys ~@API_data) ~@entity)))))" "(macroexpand-1 mapping n1 {\:a \\"a\\" \:b \\"b\\"} {\:a \:b})" "(macroexpand-1 (mapping n1 {\:a \\"a\\" \:b \\"b\\"} {\:a \:b}))" "(defmacro mapping [name API_data entity] \\r\\n  `(defn ~name [~@API_data ~@entity] \\r\\n     (into {} (map (juxt (keys ~@API_data) ~@entity)))))" "(macroexpand-1 (mapping n1 {\:a \\"a\\" \:b \\"b\\"} {\:a \:b}))" ";; Switching to datamodel namespace" "(-> (/ 144 12) (* ,,, 4 (/ 2 3)))" " (-> (/ 144 12) (* ,,, 4 (/ 2 3)) str keyword list)" ";; Switching to datamodel namespace" "(ns datamodel\\n\\n  (\:use \\n    [net.cgrand.enlive-html \:as en-html ])\\n  (\:require\\n    [clojure.zip \:as z] \\n    [clojure.data.zip.xml \:only (attr text xml->)]\\n    [clojure.xml \:as xml ]\\n    [clojure.contrib.zip-filter.xml \:as zf]\\n    ))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'datamodel)))" "(def data-url \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")" "(data-url)" "(xml/parse data-url)" "(en-html/select (data data-url) [\:events])" "(defmacro defentity [name & values]\\r\\n  `(defrecord ~name [~@values]))" "(defentity event name place start end artist)" "(defrecord event name place start end artist)" "(defrecord ( event name place start end artist))" "(defrecord event [name place start end artist])" "(defrecord Person [fname lname address])\\r\\n(defrecord Person [fname lname address])\\r\\n(defrecord Person [fname lname address])" "(defrecord event [name place start end artist])" "(defrecord Event [name place start end artist])" "(defentity (Events name place start end artist))" "(defentity  Events name place start end artist)" "(def beyonce Events. \\"mrs carter show\\" \\"belgrade\\" \\"\\" \\"\\" \\"beyonce\\")" "(def beyonce (Events. \\"mrs carter show\\" \\"belgrade\\" \\"\\" \\"\\" \\"beyonce\\"))" "(\:name beyonce)" "(println beyonce)" "(into (Events. nil nil nil) some-map)" "(into (Events. nil nil nil nil nil nil) some-map)" "(into (Events. nil nil nil nil nil) some-map)" "(def some-map \\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\")" "(def some-map [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\"])" "(into (Events. nil nil nil nil nil) some-map)" "(defmacro instantiate [rec args] `(apply ~(symbol (str \\"->\\" rec)) ~args))" "(defmacro def-seq-> [rec] `(defn ~(symbol (str \\"seq->\\" rec)) [arg\#] (apply ~(symbol (str \\"->\\" rec)) arg\#)))" "(def-seq-> Events)" "(def-seq-> Events.)" "(macroexpand-1 (def-seq-> Events))" " (defmacro def-seq-> [rec] `(defn ~(symbol (str \\"seq-> \\" rec)) [arg\#] (apply ~(symbol (str \\"-> \\" rec)) arg\#)))" "(macroexpand-1 (def-seq-> Events))" "(seq->Events some-map)" "(defmacro def-seq-> [rec] `(defn ~(symbol (str \\"seq->\\" rec)) [arg\#] (apply ~(symbol (str \\"->\\" rec)) arg\#)))" "(macroexpand-1 (def-seq-> Events))" "(defrecord User [name email place])" "(def my-values [\\"John\\" \\"john@example.com\\" \\"Dreamland\\"])" "(apply \#(User. %1 %2 %3 %4) my-values)" "(apply \#(User. %1 %2 %3) my-values)" "(defn get-record-field-names [record]\\r\\n  (->> record\\r\\n       .getDeclaredFields\\r\\n       (remove static?)\\r\\n       (map \#(.getName %))\\r\\n       (remove \#{\\"__meta\\" \\"__extmap\\"})))" "(defn static? [field]\\r\\n  (java.lang.reflect.Modifier/isStatic\\r\\n   (.getModifiers field)))" "(defn get-record-field-names [record]\\r\\n     (->> record\\r\\n          .getDeclaredFields\\r\\n          (remove static?)\\r\\n          (map \#(.getName %))\\r\\n          (remove \#{\\"__meta\\" \\"__extmap\\"})))" ";; Switching to datamodel namespace" "(use '[clojure.xml \:only (parse)])" "(parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")" "(keys (parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\"))" "(\:tag (parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\"))" ";; Switching to datamodel namespace" "(parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")" "(use '[clojure.xml \:only (parse)])" "(def pod (parse \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\"))" "(\:attrs pod)" "(count (\:content pod))" "(first (\:content pod))" "(second (\:content pod))" "(map (fn [elt] (or (\:tag elt) elt)) (xml-seq pod))" "(contents (zipp data-url))" "(contents (zipp (parsing data-url)))" "(defn contents[cont &tags] \\r\\n  (zf/xml-> cont tags))" "(defn contents[cont & tags] \\r\\n  (zf/xml-> cont tags))" "(contents (zipp (parsing data-url \:events \:events \:title)))" "(defn contents[cont & tags] \\r\\n  (assert (\= (xml-> cont tags text))\\n          ))" "(defn contents[cont & tags] \\r\\n  (assert (\= (zf/xml-> cont tags text))))" "(contents data-url \:events \:event \:title)" "(defn contents[cont & tags] \\r\\n  (assert (\= (zf/xml-> (zipp(parsing(cont))) tags text))))" "(contents data-url \:events \:event \:title)" "(zipp(parsing(data-url)))" "(zipp(parsing(parsing data-url)))" "(zipp (parsing data-url))" "(defn contents[cont & tags] \\r\\n  (assert (\= (zf/xml-> (zipp(parsing cont)) tags text))))" "(contents data-url \:events \:event \:title)" "(defn contents[cont & tags] \\r\\n  (assert (\= (zf/xml-> (zipp(parsing cont)) (seq tags) text))))" "(contents data-url \:events \:event \:title)" "(contents data-url juxt(\:events \:event \:title))" "(defn select-data[url & tags] (en-html/select (data url) (vector tags);[\:events]\\r\\n                                              ))" "(vector \:events \:event \:title)" "(select-data data-url \:events \:event \:title)" ";; Switching to datamodel namespace" "(defn select-data[url & tags] (en-html/select (data url) (vector (first tags) (rest tags))))" "(select-data data-url \:events \:event \:title)" "(select-data data-url (\:events \:event \:title))" "(vec (\:events \:event \:title))" "(defn select-data[url & tags] \\r\\n  ((let [v vector (tags)]\\r\\n    en-html/select (data url) v)))" "(defn select-data[url & tags] \\r\\n  ((let [v (vector (tags))]\\r\\n    en-html/select (data url) v)))" "(select-data data-url \:events \:event \:title)" "(defn tagovi [tags] (vector tags))" "(tagovi \:events \:event \:title)" "(defn tagovi [&tags] (vector tags))" "(defn tagovi [& tags] (vector tags))" "(tagovi \:events \:event \:title)" "(vec (make-array Object 1024))" "(vec (sort [1 2 3 4 5 6]))" "(tagovi (\:events \:event \:title))" "(defn sorted-vec\\r\\n  [coll]\\r\\n  (let [arr (into-array coll)]\\r\\n    \\r\\n    (vec arr)))" "(sorted-vec \:events \:event \:title)" "(sorted-vec (\:events \:event \:title))" "(defn sorted-vec\\r\\n     [& coll]\\r\\n     (let [arr (into-array coll)]\\r\\n       \\r\\n       (vec arr)))" "(sorted-vec \:events \:event \:title)" "(defn select-data[url & tags] \\r\\n  ((let [v (vector (tags))]\\r\\n    en-html/select (data url) (vec-of-tags tags))))" "(select-data data-url \:events \:event \:title)" "(data data-url)" "(en-html/xml-resource data-url)" "(en-html/xml-resource url)" "(en-html/xml-resource data-url)" "(select-data data-url \:events \:event \:title)" "(en-html/xml-resource url)" "(en-html/xml-resource data-url)" "(mapcat (comp \:content zip/node) \\r\\n        (xz/xml-> (zipp parsing(data-url))\\r\\n                  (xz/tag\= \:events)\\r\\n                  (xz/tag\= \:event)\\r\\n                  (xz/tag\= \:title)))" "(mapcat (comp \:content z/node) \\r\\n           (xz/xml-> (zipp parsing(data-url))\\r\\n                     (xz/tag\= \:events)\\r\\n                     (xz/tag\= \:event)\\r\\n                     (xz/tag\= \:title)))" ";; Switching to datamodel namespace" "(loc-preds (events event title))" "(str something)" "(str 1)" "(def something)" "(str something)" "(def something something)" "(something)" "(def something (events event title))" "(println *clojure-version*)" ";; Switching to datamodel namespace" "(apply str ([] event))" "(defn list-of-preds [& colls] ([for c colls] [xz/tag\= c]))" "(defn list-of-preds [& colls] (for[c colls] [xz/tag\= c]))" "(list-of-preds \:events \:event \:title)" "(defn list-of-preds [& colls] (for[c colls] ['(xz/tag)\= c]))" "(list-of-preds \:events \:event \:title)" "(defn list-of-preds [& colls] (for[c colls] ['xz/tag '\= c]))" "(list-of-preds \:events \:event \:title)" "(get-contents-from-tag data-url \:events \:event \:title)" "(mapcat (comp \:content z/node)\\r\\n        (zf/xml-> (zipp (parsing url))\\r\\n                  (xz/tag\= \:events)\\r\\n                  (xz/tag\= \:event)\\r\\n                  (xz/tag\= \:title)))" "(mapcat (comp \:content z/node)\\r\\n           (zf/xml-> (zipp (parsing data-url))\\r\\n                     (xz/tag\= \:events)\\r\\n                     (xz/tag\= \:event)\\r\\n                     (xz/tag\= \:title)))" "(get-contents-from-tag data-url \:events \:event \:title)" "(list-of-preds \:events \:event \:title)" "(def loc-preds [(xz/tag\= \:events) (xz/tag\= \:event) (xz/tag\= \:title)])" "(loc-preds)" "(get-contents-from-tag data-url)" "(get-contents-from-tag data-url \:events \:event \:title)" "(get-contents-from-tags data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" ";; Switching to datamodel namespace" "(xml-> zipped \:events \:event \:title text)" "(xz/xml-> zipped \:events \:event \:title xz/text)" ";; Switching to datamodel namespace" "(into {} map \#(\:title %) (get-content-from-tags data-url \:events \:event \:title))" "(into {} (map \#(\:title %) (get-content-from-tags data-url \:events \:event \:title)))" "(map \#(\:title %) (get-content-from-tags data-url \:events \:event \:title))" "(map \#(hash-map % (keyword \\"title\\") (get-content-from-tags data-url \:events \:event \:title))\\n     )" "(map \#(hash-map % (keyword \\"title\\")) (get-content-from-tags data-url \:events \:event \:title))" "(map-tags-contents data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:description)" "(merge(map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:description))" "(merge-lists (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:description))" "(reduce conj (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:description)\\n        )" "(conj '{\\" Gaudeamus Igitur (So Let Us Rejoice); Program TBA\\\\n\\" \:description} '{\\"Belgrade Early Music Festival, Gosta / Purcell\: Dido & Aeneas\\" \:title})" "(for [el1 (map-tags-contents data-url \:events \:event \:title) \\r\\n      el2 (map-tags-contents data-url \:events \:event \:description)] (into {} (conj el1 el2 )))" "(map list titles descriptions)" "(map conj titles descriptions)" "(create-map)" "(into {} (map \:keyword (\\"jedan\\" \\"dva\\" \\"tri\\")))" "(into {} (map keyword (\\"jedan\\" \\"dva\\" \\"tri\\")))" "(into {} (map \#(keyword %) (\\"jedan\\" \\"dva\\" \\"tri\\")))" "(into {} (map \#(keyword %) [\\"jedan\\" \\"dva\\" \\"tri\\"]))" "(into {} (map \#(keyword %) {\\"jedan\\" \\"dva\\" \\"tri\\"}))" "(into {} (map \#(keyword %) \\"jedan\\" \\"dva\\" \\"tri\\"))" "(into {} (map \#(keyword %) '(\\"jedan\\" \\"dva\\" \\"tri\\")))" "(let [l (\\"jedan\\" \\"dva\\" \\"tri\\")] (into {} (map \#(keyword %) m)))" "(let [l (\\"jedan\\" \\"dva\\" \\"tri\\")] (into {} (map \#(keyword %) l)))" "(-> map keyword [\\"jedan\\" \\"dva\\"])" "(apply (map(keyword [\\"jedan\\" \\"dva\\"])))" "(apply (keyword [\\"jedan\\" \\"dva\\"]))" "([let args '(\\"a\\" \\"b\\" \\"c\\")]for [k args] (vector (map \#(keyword %) k)))" "(let [args '(\\"a\\" \\"b\\" \\"c\\")] (for [k args] (vector (map \#(keyword %) k))))" "(let [args (\\"a\\" \\"b\\" \\"c\\")] (for [k args] (vector (map \#(keyword %) k))))" "(apply keyword [\\"jedan\\" \\"dva\\"])" "(apply keyword (\\"jedan\\" \\"dva\\"))" "(apply keyword {\\"jedan\\" \\"dva\\"})" "(into {} (apply keyword [\\"jedan\\" \\"dva\\"]))" "(to-keys \\"jedan\\" \\"dva\\")" "(to-keys (\\"jedan\\" \\"dva\\"))" "(to-keys `(\\"jedan\\" \\"dva\\"))" "(to-keys (\\"jedan\\" \\"dva\\"))" "(to-keys `(\\"jedan\\" \\"dva\\"))" "(defentity event-record events event titles)" "(get-record-field-names event-record)" "(to-keys (get-record-field-names event-record))" "(map-tags-contents data-url (to-keys (get-record-field-names event-record)))" "(def temol (html/html-resource \\"index.html\\"))" "(def teml (html-resource \\"index.html\\"))" "(select teml [(attr\=\:class \\"\\"psdg.right)])" "(select teml [(attr\=\:class \\"psdg.right\\")])" "(select teml [.psdg.right])" "(select teml [.psdg-right])" "(select teml [\:div.psdg-right])" "(def page-content '({\:content (\\"Hi, mom\!\\")}))" "(pprint (transform teml\\r\\n                                  [\:div.psdg-right]\\r\\n                                  (content page-content)))" "(def transformed(transform teml\\r\\n                                     [\:div.psdg-right]\\r\\n                                     (content page-content)))" "(print (apply str (emit* transformed)))" "(pprint (transform teml\\r\\n                                     [\:div.psdg-right]\\r\\n                                     (content [[[page-conten]]])))" "(pprint (transform teml\\r\\n                                        [\:div.psdg-right]\\r\\n                                        (content [[[page-content]]])))" "(def page-content '(\\"Hi, mom\!\\"))" "(pprint (transform teml\\r\\n                                           [\:div.psdg-right]\\r\\n                                           (content [[[page-content]]])))" "(pprint (transform teml\\r\\n                                           [\:div.psdg-right]\\r\\n                                           (content page-content)))" "(print (apply str (emit* transformed)))" " (def transformed(transform teml\\r\\n                                        [\:div.psdg-right]\\r\\n                                        (content page-content)))" "(print (apply str (emit* transformed)))" ";; Switching to templating namespace" "(def template (html-resource \\"index.html\\"))" "(def template-div (html-resource \\"index.html\\"))" "(select template-div [(attr\=\:class \\"psdg.right\\")])" "(select template-div [(\:psdg.right)])" "(select template-div [\:psdg.right])" "(select template-div [\:psdg-right])" "(select template-div [\:div.psdg-right])" ";; Switching to templating namespace" "(transform cell-selector (clone-for [event *dummy-content* \:event-data] (content event) ))" "(def cell-selector (select template-div [\:div.psdg-right]))" "(def template-div (html-resource \\"index.html\\"))" "(def cell-selector (select template-div [\:div.psdg-right]))" "(transform cell-selector (clone-for [event *dummy-content* \:event-data] (content event) ))" "(transform cell-selector (clone-for [event *dummy-content*] (content event) ))" "(def *dummy-content*\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(transform cell-selector (clone-for [event *dummy-content*] (content event) ))" "(transform template-div [\:div.psdg-right] (clone-for [event *dummy-content*] (content event) ))" "(event *dummy-content*)" "(transform template-div [\:div.psdg-right] (clone-for [event [\\"one\\" \\"two\\" \\"three\\"]] (content event)))" ";; Switching to templating namespace" "(into [] (map \#(into [] (vals %) *dummy-content*)))" "(def *dummy-content*\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(into [] (map \#(into [] (vals %) *dummy-content*)))" "(map \#(into [] (vals %) *dummy-content*))" " (map \#(into [] (vals %)) *dummy-content*)" "(into [] (map \#(into [] (vals %)) *dummy-content*))" "(map vals *dummy-content*)" "(map vals (\:event-data *dummy-content*))" "(into [] (map vals (\:event-data *dummy-content*)))" "(into [] (map \#(into [](vals %) (\:event-data *dummy-content*))))" "(into [] (map \#(into [](vals %)) (\:event-data *dummy-content*)))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (content item)))" "(def map-of-data (into [] (map \#(into [](vals %)) (\:event-data *dummy-content*))))" "(apply str (t2 map-of-data))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] ((for [d item] content d))))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (for [d item] (ontent d))))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (for [d item] (cntent d))))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (for [d item] (content d))))" "(apply str (t2 map-of-data))" "(let [[x] map-of-data] (apply str (t2 x)))" "(let [[x] map-of-data] (apply str  x))" "(map \#(apply str (t2)%) map-of-data)" "(map \#(apply str (t2%)) map-of-data)" "(map \#(apply str (t2 %)) map-of-data)" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (content d)))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (clone-for [item data] (content item)))" "(map \#(apply str (t2 %)) map-of-data)" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (for [d data] content data))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right] (for [d data] (content data)))" "(map \#(apply str (t2 %)) map-of-data)" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right]  (content data))" "(map \#(apply str (t2 %)) map-of-data)" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right]  (map \#(content %)data))" "(map \#(apply str (t2 %)) map-of-data)" "(def template-div (html-resource \\"index.html\\"))" "(defsnippet cell-model \\"index.html\\" cell-selector\\r\\n  [data]\\r\\n  [\:div.psdg-right] \\r\\n        (map (content %) data))" "(def cell-selector (select template-div [\:div.psdg-right]))" "(def template-div (html-resource \\"index.html\\"))" "(def cell-selector (select template-div [\:div.psdg-right]))" "(defsnippet cell-model \\"index.html\\" cell-selector\\r\\n  [data]\\r\\n  [\:div.psdg-right] \\r\\n        (map (content %) data))" "(defsnippet cell-model \\"index.html\\" cell-selector\\r\\n     [data]\\r\\n     [\:div.psdg-right] \\r\\n           (map \#(content %) data))" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right]  (map \#(cell-model %) data))" "(map \#(apply str (t2 %)) map-of-data)" "(map \#(cell-model %) map-of-data)" "(map \#(apply str (cell-model %)) map-of-data)" "(map-of-data)" "(into [] (map \#(into [](vals %)) (\:event-data *dummy-content*)))" "\\r\\n(deftemplate t2 \\"index.html\\" [data] [\:body]  (for [d data] (map \#(cell-model %) d)))" "(map \#(apply str (t2 %)) map-of-data)" "(deftemplate t2 \\"index.html\\" [data] [\:body]  (for [d data] (cell-model d)))" "(map \#(apply str (t2 %)) map-of-data)" ";; Switching to templating namespace" "(map-of-data)" "(defn map-of-data [](into [] (map \#(into [](vals %)) (\:event-data *dummy-content*))))" "(def *dummy-content*\\r\\n {\:title \\"Events Mashup\\"\\r\\n   \:event-data [{ \:event-name \\"event name 1\\"\\r\\n                        \:performer \\"performer 1\\"\\r\\n                      \:date \\"date 1\\"\\r\\n                           \:start-time \\"start time 1\\"\\r\\n                           \:end-time \\"end time 1\\"}\\r\\n      {\:event-name \\"event name 2\\"\\r\\n                           \:performer \\"performer 2\\"\\r\\n                          \:date \\"date 2\\"\\r\\n                           \:start-time \\"start time 2\\"\\r\\n                           \:end-time \\"end time 2\\"}]})" "(defn map-of-data [](into [] (map \#(into [](vals %)) (\:event-data *dummy-content*))))" "(map-of-data)" "(wrap \:ul)" " (take 5 (html/select (fetch-url \\"http\://master.fon.rs/\\") [\:span.vestinove]))" "(defn fetch-url [url]\\r\\n  (html/html-resource (java.net.URL. url)))" "(take 5 (html/select (fetch-url \\"http\://master.fon.rs/\\") [\:span.vestinove]))" "(wrap \:ul (map (wrap \:li) (\\"el 1\\" \\"el2\\" \\"el3\\" \\"el4\\" \\"el5\\")))" "(take 5 (html/select (fetch-url \\"http\://master.fon.rs/\\") [\:span.vestistare]))" "(wrap \:ul (map (wrap \:li) (take 5 (html/select (fetch-url \\"http\://master.fon.rs/\\") [\:span.vestistare]))))" "(def li-wrapper\\r\\n  (wrap \:li))\\r\\n(def ul-wrapper\\r\\n  (wrap \:ul))" "(defn make-ul [elements]\\r\\n  \\"Takes coll and makes html unordered list with coll's elements.\\"\\r\\n  (ul-wrapper (map li-wrapper elements)))" "(defn make-ul-with-h4 [h4 elements]\\r\\n  (merge [(h4-wrapper h4) (make-ul elements)]))" "(def h4-wrapper\\r\\n  (wrap \:h4))" "(defn make-ul-with-h4 [h4 elements]\\r\\n     (merge [(h4-wrapper h4) (make-ul elements)]))" "\\n\\r\\n(def li-wrapper\\r\\n     (wrap \:li))\\r\\n   (def ul-wrapper\\r\\n     (wrap \:ul))" "(def h4-wrapper\\r\\n     (wrap \:h4))" "(defn make-ul-with-h4 [h4 elements]\\r\\n        (merge [(h4-wrapper h4) (make-ul elements)]))" "(make-ul-with-h4 \\"FonForum-Master\\" (take 5 (html/select (fetch-url \\"http\://master.fon.rs/\\") [\:span.vestistare])))" "(wrap \:div \\"psdg-right\\")" "(def div-wrapper (wrap \:div))\\r\\n\\r\\n(defn make-a-row [title values]\\r\\n  (merge [(div-wrapper title \\"psdg-left\\") (div values \\"psdg-right\\")]))" "(make-a-row \\"event\\" (map-of-data))" "(defn make-a-row [title values]\\r\\n  (merge [(div-wrapper title \\"psdg-left\\") (div-wrapper values \\"psdg-right\\")]))" "(make-a-row \\"event\\" (map-of-data))" "(map-of-data)" "(make-a-row \\"event\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" " (merge [(div-wrapper \\"event\\" \\"psdg-left\\") (div-wrapper \\"psdg-right\\" values )])" "(merge [(div-wrapper \\"event\\" \\"psdg-left\\") (div-wrapper \\"psdg-right\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"] )])" "(wrap \:div \\"psdg-right\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(make-a-row \\"event\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(def div-wrapper (wrap \:div))\\r\\n\\r\\n(defn make-div [elements] (map div-wrapper elements))\\r\\n\\r\\n(defn make-a-row [title values]\\r\\n  (merge [(div-wrapper title) (make-div values)]))" "(make-a-row \\"event\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(add-class (div-wrapper title) \\"psdg-right\\")" "(add-class (div-wrapper \\"nesto\\") \\"psdg-right\\")" "(make-a-row \\"events\\" (map-of-data))" "(make-a-row \\"events\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(t2 [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(deftemplate t2 \\"index.html\\" [data] [\:div.psdg-right]  (substitute (make-a-row \\"events\\" data)))" "(t2 [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(t2 \\"events\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(t2 [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(make-a-row \\"events\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" " (def div-wrapper  (wrap \:div {\:id \\"psdg-right\\"}) )\\r\\n    (def title-wrapper (wrap \:div {\:id \\"psdg-left\\"}))\\r\\n\\r\\n    (defn make-div [elements ] (map div-wrapper elements))\\r\\n\\r\\n    (defn make-a-row [title values]\\r\\n    (merge [ (title-wrapper title) (make-div values)]))" "(make-a-row \\"events\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(deftemplate t2 \\"index.html\\" [title data] \\r\\n  [\:div.psdg-left]  (substitute (make-a-row title data)))" "(t2 [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(t2 \\"events\\" [\\"event name 1\\" \\"performer 1\\" \\"date 1\\" \\"start time 1\\" \\"end time 1\\"])" "(map-tags-contents data-url \\"title\\" \\"end-time\\")" "(def data-url \\"http\://api.eventful.com/rest/events/search?app_key\=4H4Vff4PdrTGp3vV&keywords\=music&location\=Belgrade&date\=Future\\")\\r\\n\\r\\n(defn parsing [url](xml/parse url))\\r\\n\\r\\n(defn zipp [data] (z/xml-zip data))\\r\\n\\r\\n(defn get-content-from-tags [url & tags]\\r\\n  (mapcat (comp \:content z/node)\\r\\n          (apply xz/xml->\\r\\n                 (-> url xml/parse z/xml-zip)\\r\\n                  (for [t tags]\\r\\n                     (zf/tag\= t)\\r\\n                   ))))\\r\\n\\r\\n(defn map-tags-contents [url & tags]\\r\\n  (map \#(hash-map % (keyword (last tags)))\\r\\n      (mapcat (comp \:content z/node)\\r\\n          (apply xz/xml->\\r\\n                 (-> url xml/parse z/xml-zip)\\r\\n                  (for [t tags]\\r\\n                     (zf/tag\= t)\\r\\n                   )))))" "(map-tags-contents data-url \\"title\\" \\"end-time\\")" ";; Switching to datamodel namespace" "(map-tags-contents data-url \\"event-name\\" \\"end-time\\")" "(map-tags-contents data-url \\"title\\" \\"start_time\\")" "(def tags [\\"title\\" \\"start_time\\"])" "(for [t tags]\\r\\n\\t                     (zf/tag\= t)\\n                      )" "  (apply xz/xml->\\r\\n                 (-> data-url xml/parse z/xml-zip)\\r\\n\\t                  (for [t tags]\\r\\n\\t                     (zf/tag\= t)\\r\\n                   ))" "(-> data-url xml/parse z/xml-zip)" "(get-content-from-tags data-url \:events \:event \:title)" "(get-content-from-tags data-url \:events \:event \:venue_name)" "(map-tags-contents \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" "(merge-lists (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name))" "(defmacro data-snippet [name url &tags]\\r\\n  `(def ~name (map-tags-contents url ~@tags)))" "(data-snippet titles1 data-url \:events \:event \:title)" "(data-snippet titles1 data-url (\:events \:event \:title))" "(defmacro data-snippet [name url &tags]\\r\\n  `(def ~name (map-tags-contents ~@url ~@tags)))" "(data-snippet titles1 data-url (\:events \:event \:title))" "(data-snippet titles1 data-url \:events \:event \:title)" "(defmacro data-snippet [name url &tags]\\r\\n  `(def ~name (map-tags-contents ~url ~@tags)))" "(data-snippet titles1 data-url \:events \:event \:title)" "(defmacro data-snippet [name url &tags]\\r\\n  `(def ~name (map-tags-contents ~url ~tags)))" "(data-snippet titles1 data-url \:events \:event \:title)" "(defn merge-disjoint\\r\\n  \\"Like merge, but throws with any key overlap between maps\\"\\r\\n  ([] {})\\r\\n  ([m] m)\\r\\n  ([m1 m2]\\r\\n     (doseq [k (keys m1)]\\r\\n       (when (contains? m2 k) (throw (RuntimeException. (str \\"Duplicate key \\" k)))))\\r\\n     (into m2 m1))\\r\\n  ([m1 m2 & maps]\\r\\n     (reduce merge-disjoint m1 (cons m2 maps))))" "(merge-disjoint {\:key1 \\"val1\\" \:key2 \\"val2\\"} {\:key3 \\"val1\\" \:key4 \\"val2\\"})" "(merge-disjoint {\:key1 \\"val1\\" \:key2 \\"val2\\"} {\:key1 \\"val1\\" \:key2 \\"val2\\"})" "(def m1 {\:key1 \\"val1\\" \:key2 \\"val2\\"})" "(def m2 {\:key3 \\"val1\\" \:key4 \\"val2\\"})" "(keys-to-vals m2 \:key3)" "(let [val2 (val m2 \:key3)] (filter \#(\= \:key1 %) val2) m1)" "(let [val2 (vals m2 \:key3)] (filter \#(\= \:key1 %) val2) m1)" "(let [val2 (m2 \:key3)] (filter \#(\= \:key1 %) val2) m1)" "(def m2 {\:key3 \\"val1\\" \:key4 \\"val3\\"})" "(let [val2 (m2 \:key4)] (filter \#(\= \:key1 %) val2) m1)" "(m2 \:key4)" "(let [val2 (m2 \:key4)] (filter \#(\= val2 (get % \:key1)) m1))" "(let [val2 (m2 \:key3)] (filter \#(\= val2 (get % \:key1)) m1))" "(filter \#(\= \\"val1\\" (get % \:key1)) m1)" "(\= (m2 \:key3) (m1 \:key1))" "(when (\= (m1 \:key) (m2 \:key3)) (into m1 m2))" "(into m1 m2)" "((when (\= (m1 \:key) (m2 \:key3))) (into m1 m2))" "((when (\= (m1 \:key) (m2 \:key3))) (into {} (merge m1 m2)))" "((when (\= (m1 \:key) (m2 \:key3)) (into {} (merge m1 m2))))" "(when (\= (m1 \:key) (m2 \:key3)) (into {} (merge m1 m2)))" "(when (\= (m1 \:key) (m2 \:key3)) (into  m1 m2))" "(when (\= (m1 \:key) (m2 \:key3)) (into  m2 m1))" "(into  m2 m1)" "(if (\= (m1 \:key) (m2 \:key3)) (into  m2 m1))" "(def new-map (when (\= (m1 \:key) (m2 \:key3)) (into  m2 m1)))" "(new-map)" "(defn new-map [] (when (\= (m1 \:key) (m2 \:key3)) (into  m2 m1)))" "(new-map)" "(defn new-map [] (when (\= (m1 \:key1) (m2 \:key3)) (into  m2 m1)))" "(new-map)" "(defn join \\r\\n  ([] {})\\r\\n  ([m] m)\\r\\n  ([m1 m2 key1 key2]\\r\\n   (when (\= (m1 key1) (m2 key2)) (into  m2 m1))) ;samo da se izbaci ta ista vrednost\\r\\n     )" "(join m1 m2 \:key1 \:key2)" "(defn join \\r\\n     ([m1 m2 key1 key2]\\r\\n      (when (\= (m1 key1) (m2 key2)) (into  m2 m1))))" "(defn join \\r\\n        [m1 m2 key1 key2]\\r\\n         (when (\= (m1 key1) (m2 key2)) (into  m2 m1)))" "(join m1 m2 \:key1 \:key3)" "(get-content-from-tags data-url \:events \:event \:title)" "(map-tags-contents data-url \:events \:event \:title)" " (map-tags-contents data-url \:events \:event \:title)" "(into (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name))" "(into {} map(%1 %2)(map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name))" "(map (partial apply merge) \\r\\n     (apply map vector (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name)))" "((map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name))" "(map \#(partial apply merge (map-tags-contents data-url \:events \:event \:title) (map-tags-contents data-url \:events \:event \:venue_name)))" "(into  '[] (map-tags-contents data-url \:events \:event \:title))" "(merge-disjoint (into  '[] (map-tags-contents data-url \:events \:event \:title)) (into  '[] (map-tags-contents data-url \:events \:event \:venue_name)))" "(into '[] (into  '[] (map-tags-contents data-url \:events \:event \:title)) (into  '[] (map-tags-contents data-url \:events \:event \:title)))" "(vector (into  '[] (map-tags-contents data-url \:events \:event \:title)) (into  '[] (map-tags-contents data-url \:events \:event \:title)))" "(vector (into  '[] (map-tags-contents data-url \:events \:event \:title)) (into  '[] (map-tags-contents data-url \:events \:event \:venue_name)))" "(def data (vector (into  '[] (map-tags-contents data-url \:events \:event \:title)) (into  '[] (map-tags-contents data-url \:events \:event \:venue_name))))" "(apply mapv merge data)" "(defn mapv\\r\\n  ([f coll]\\r\\n     (-> (reduce (fn [v o] (conj\! v (f o))) (transient []) coll)\\r\\n         persistent\!)))" "(apply mapv merge data)" "(map (partial apply merge) \\r\\n     (apply map vector data))" ";; Switching to datamodel namespace" "(defn do-to-map [amap keyseq f]\\r\\n  (reduce \#(assoc %1 %2 (f (%1 %2))) amap keyseq))" "(doto-map {\:a 1 \:b 2 \:c 3} [\:a \:c] + 2)" "(do-to-map {\:a 1 \:b 2 \:c 3} [\:a \:c] + 2)" "(do-to-map {\:a 1 \:b 2 \:c 3} [\:a \:c] \#(+ 2))" "(do-to-map {\:a 1 \:b 2 \:c 3} [\:a \:c] (+ 2))" "(defn doto-map [m ks f & args]\\r\\n  (reduce \#(apply update-in %1 [%2] f args) m ks))" "(doto-map {\:a 1 \:b 2 \:c 3} [\:a \:c] + 2)" "(doto-map (z/xml-zip(xml/parse data-url)) [\:title \:venue_name] get-content-from-tags data-url \:title \:venue_name)" "(doto-map (z/xml-zip(xml/parse data-url)) [\:title \:venue_name] get-content-from-tags)" "(defn doto-map [m ks f]\\r\\n     (reduce \#(apply update-in %1 [%2] f) m ks))" "(doto-map (z/xml-zip(xml/parse data-url)) [\:title \:venue_name] get-content-from-tags)" "(map-tags-contents data-url \:title \:venue_name)" "(map-tags-contents data-url \:events \:event)" "(map-tags-contents data-url \:events \:event \:title)" "(map-tags-contents data-url  \:title)" "(defn xz [url]((zip/xml-zip (xml/parse url))))" "(defn xz [url]((z/xml-zip (xml/parse url))))" "(defn xml-zipper [& tags](zf/xml-> (xz data-url) tags))" "(defn func [& tags](\#(zf/xml1-> (xml-zipper tags) % zf/text)))" "(def tags (\:title \:venue_name))" "(map \#((apply comp (reverse func)) %) tags)" "(map \#((apply comp (reverse func \:events \:event)) %) tags)" "(map \#((apply comp (reverse( func \:events \:event))) %) tags)" "(get-events (xz data-url))" "(xz data-url)" "(def tags '(\:title \:venue_name))" "(map \#((apply comp (reverse( func \:events \:event))) %) tags)" "(def tags [\:title \:venue_name])" "(map \#((apply comp (reverse( func \:events \:event))) %) tags)" "(map \#((apply comp (reverse (func '(\:events \:event)))) %) tags)" "(map \#((apply comp (reverse func )) %) tags)" "(map \#((apply comp (reverse (func '(\:events \:event)))) %) tags)" "(map \#((apply comp (reverse (func \:events \:event))) %) tags)" "(map \#((apply comp (reverse (func '(\:events \:event)))) %) tags)" "(map \#((apply comp (reverse (func \:events \:event))) %) tags)" "(map \#((apply comp (reverse (func [\:events \:event]))) %) tags)" "(reduce (fn [h item] \\r\\n          (assoc h (xml1-> item \:title zf/text) \\r\\n                   (xml1-> item \:venue_title zf/text))) \\r\\n        {} (xml-zipper \:events \:event))" " (reduce (fn [h item] \\r\\n             (assoc h (zf/xml1-> item \:title zf/text) \\r\\n                      (zf/xml1-> item \:venue_title zf/text))) \\r\\n           {} (xml-zipper \:events \:event))" "(reduce (fn [h item] \\r\\n                (assoc h (zf/xml1-> item \:title zf/text) \\r\\n                         (zf/xml1-> item \:venue_title zf/text))) \\r\\n              {} (xml-zipper \:events \:event))" "(reduce (fn [h item] \\r\\n                   (assoc h (zf/xml1-> item \:title zf/text) \\r\\n                            (zf/xml1-> item \:venue_title zf/text))) \\r\\n                 {} (zf/xml-> (xz data-url) \:events \:event))" "(reduce (fn [h item] \\r\\n                      (assoc h (zf/xml1-> item \:title zf/text) \\r\\n                               (zf/xml1-> item \:venue_name zf/text))) \\r\\n                    {} (zf/xml-> (xz data-url) \:events \:event))" "(def func \#(zf/xml1-> % % zf/text))" "(defn remap [m f]\\r\\n  (apply hash-map (mapcat \#(list % (f (% m))) (keys m))))" "(prn (remap (xml-zipper \:events \:event) func))" "(reduce (fn [h item] \\r\\n                         (assoc h (zf/xml1-> item \:title zf/text) \\r\\n                                  (zf/xml1-> item \:venue_name zf/text))) \\r\\n                       {} (zf/xml-> (xz data-url) \:events \:event))" "(def func \#(xf/xml1-> % % zf/text))" "(def func \#(zf/xml1-> % % zf/text))" "(apply hash-map (mapcat \#(list % (func(xz %))) (keys [\:title \:venue_name])))" "(apply hash-map (mapcat \#(list % (func (% (xz data-url)))) (keys {\:title \:venue_name})))" "(defn func [& tags](\#(zf/xml1-> (xml-zipper tags) % zf/text)))" "(apply hash-map (mapcat \#(list % (func (% (xz data-url)))) (keys {\:title \:venue_name})))" "(apply hash-map (mapcat \#(list % (func {\:events \:event} %) (keys {\:title \:venue_name})))\\n       )" "(apply hash-map (mapcat \#(list % (func {\:events \:event} %) \:title \:venue_name)))" "(apply hash-map (mapcat \#(list % (func \:events \:event %) \:title \:venue_name)))" "(map func [\:title \:venue_name])" "(reduce (fn [h item] \\r\\n                         (assoc h (map func [\:title \:venue_name]))) \\r\\n                      {} (zf/xml-> (xz data-url) \:events \:event))" "\\n\\n (reduce (fn [h item] \\r\\n                            (assoc h (apply map func [\:title \:venue_name]))) \\r\\n                         {} (zf/xml-> (xz data-url) \:events \:event))" "(reduce (fn [h item] \\r\\n                               (assoc h (apply map func [\:title \:venue_name]))) \\r\\n                            {} )" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n  (map \#(list (get-tag \:title %) (get-tag venue_name %))\\r\\n       (map \:content (\:content (clojure.xml/parse data-url)))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n     (map \#(list (get-tag \:title %) (get-tag \:venue_name %))\\r\\n          (map \:content (\:content (clojure.xml/parse data-url)))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n        (map \#(list (get-tag \:title %) (get-tag \:venue_name %))\\r\\n             (map \:content  (clojure.xml/parse data-url))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n           (map \#(list (get-tag \:title %) (get-tag \:venue_name %))\\r\\n                (map \:events \:event  (clojure.xml/parse data-url))))" "(letfn [(get-tag [tag coll] (\:content (first (filter \#(\= tag (\:tag %)) coll))))]\\r\\n              (map \#(list (get-tag \:title %) (get-tag \:venue_name %))\\r\\n                   (xml-zipper \:events \:event)))" "(defn select-tags [xz & tags]\\n  (map (juxt (for [t tags] \#(zf/xml1-> % t zf/text)) xz)))" "(select-tags (xml-zipper \:events \:event) \:title \:venue_name)" "(defn select-tags [xz & tags]\\r\\n     (map (juxt (for [t tags] \#(zf/xml1-> xz t zf/text)))))" "(select-tags (xml-zipper \:events \:event) \:title \:venue_name)" "(defn select-tags [xz & tags]\\r\\n        (map (-> xz (juxt (for [t tags] \#(zf/xml1-> xz t zf/text))))))" "(defn select-tags [xz & tags]\\r\\n           (map (-> xz (juxt (for [t tags] \#(zf/xml1-> % t zf/text))))))" "(select-tags (xml-zipper \:events \:event) \:title \:venue_name)" "(defn select-tags [xz & tags]\\r\\n              (-> xz (juxt (for [t tags] \#(zf/xml1-> % t zf/text)))))" "(select-tags (xml-zipper \:events \:event) \:title \:venue_name)" "(map \#((apply comp (reverse( func \:events \:event))) %) tags)" "(map \#((apply comp (reverse( func (xml-zipper \:events \:event)))) %) tags)" "(testing)" "(-> data-url \\r\\n  parse \\r\\n  (get-events \:title \:start_time [\:performers \:performer \:name] \:stop_time)\\r\\n  first \\r\\n  prn)"]
eclipse.preferences.version=1
